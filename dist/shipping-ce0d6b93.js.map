{"version":3,"file":"shipping-ce0d6b93.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","export enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n}\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isLoading,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormAfter),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n                ExtensionRegion.ShippingShippingAddressFormAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormAfter);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormAfter} />\n            )}\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            testId=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import React, { FC, useCallback } from 'react';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\n\nimport { TranslatedString, localizeAddress } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector']) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector = showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector']) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector = showPayPalFastlaneAddressSelector;\n            },\n        },\n    }\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(methodId)\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress = await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && <span className=\"locality\">{`${address.city}, `}</span>}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n}\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import React, { FC } from 'react';\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { ShippingAddressProps } from './ShippingAddress';\nimport { Address } from '@bigcommerce/checkout-sdk';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm) {\n        return (\n            <PayPalFastlaneShippingAddress\n                { ...props }\n                shippingAddress={shippingAddress}\n                methodId={methodId}\n            />\n        )\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    shouldShowAddAddressInCheckout,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n}: ShippingFormProps & WithLanguageProps) => {\n    // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n    const {\n        isPayPalFastlaneEnabled,\n        mergedBcAndPayPalFastlaneAddresses,\n        shouldShowPayPalFastlaneShippingForm,\n    } = usePayPalFastlaneAddress();\n\n    const shippingAddresses = isPayPalFastlaneEnabled\n        ? mergedBcAndPayPalFastlaneAddresses\n        : addresses;\n\n    useEffect(() => {\n        if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n            initialize({ methodId });\n        }\n    }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormBefore),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n                ExtensionRegion.ShippingShippingAddressFormBefore,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormBefore);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormBefore} />\n            )}\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","ExtensionRegionContainer","useExtensions","extensionContext","useContext","ExtensionContext","Error","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","props","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","isMultiShippingMode","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","extensionService","isExtensionEnabled","isExtensionRegionEnabled","Boolean","isRegionEnabled","useEffect","renderExtension","ShippingShippingAddressFormAfter","removeListeners","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","testId","addressFieldName","fieldName","fieldValue","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","useRef","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","current","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","PayPalFastlaneShippingAddress","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","isPayPalFastlaneEnabled","mergedBcAndPayPalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","ShippingShippingAddressFormBefore","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","email","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","shouldUseStripeLinkByMinimumAmount","Shipping"],"sourceRoot":""}